// Code generated by qapi-gen.py. DO NOT EDIT.
package {{ pkg }}

import (
{%- if events %}
{{'\t' }}"encoding/json"
{%- endif %}
{{'\t' }}"log/slog"
)

type EventProcessor interface {
{% for event in events -%}
{% set arg = "arg " + capitalize(to_go_camel_case(event.arg)) if event.arg else "" -%}
{{ '\t' }}Process{{ capitalize(to_go_camel_case(event.name)) }}({{ arg }}) error
{% endfor -%}
{{ '\t' }}ProcessGeneric(bytes []byte) error
}

func ProcessEvent(e EventProcessor, event string, eventData []byte) error {
{%- if events %}
{{ '\t' }}switch event {
{% for event in events -%}
{{ '\t' }}case "{{  event.name }}":
{% set type = capitalize(to_go_camel_case(event.arg)) if event.arg else "" -%}
{% if type -%}
{{ '\t' }}{{ '\t' }}var data {{ type }}
{{ '\t' }}{{ '\t' }}if err := json.Unmarshal(eventData, &data); err != nil {
{{ '\t' }}{{ '\t' }}{{ '\t' }}return err
{{ '\t' }}{{ '\t' }}}
{{ '\t' }}{{ '\t' }}return e.Process{{ capitalize(to_go_camel_case(event.name)) }}(data)
{% else -%}
{{ '\t' }}{{ '\t' }}return e.Process{{ capitalize(to_go_camel_case(event.name)) }}()
{% endif -%}
{% endfor -%}
{{ '\t' }}}
{%- endif %}
{{ '\t' }}return nil
}

type DefaultEventProcessor struct {}

{% for event in events -%}
{% set arg = "arg " + capitalize(to_go_camel_case(event.arg)) if event.arg else "" -%}
func (ep *DefaultEventProcessor) Process{{ capitalize(to_go_camel_case(event.name)) }}({{ arg }}) error {
{% if event.arg -%}
{{ '\t' }}slog.Debug("Processing event", "event", "{{ event.name }}", "data", arg)
{% else -%}
{{ '\t' }}slog.Debug("Processing event", "event", "{{ event.name }}")
{% endif -%}
{{ '\t' }}return nil
}
{% endfor -%}

func (ep *DefaultEventProcessor) ProcessGeneric(bytes []byte) error {
{{ '\t' }}slog.Debug("Processing generic message", "message", "string(bytes)")
{{ '\t' }}return nil
}
