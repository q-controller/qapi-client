// Code generated by qapi-gen.py. DO NOT EDIT.
package {{ pkg }}

{% for enum in module.enums -%}
{% set enumName = capitalize(to_go_camel_case(enum.name)) %}
type {{ enumName }} string

const (
{% for val in enum.values -%}
{{ '\t' }}{{ enumName + capitalize(to_go_camel_case(val)) }} {{ enumName }} = "{{ val }}"
{% endfor -%}
)

{% endfor -%}

{% for type in module.types -%}
type {{ capitalize(to_go_camel_case(type.name)) }} struct {
{% for field in type.fields -%}
{{ '\t' }}{{ capitalize(to_go_camel_case(field.name)) }} {% if field.optional %}*{% endif %}{% if is_builtin_type(field.typename) %}{{ builtin_to_go(field.typename) }}{% else %}{{ capitalize(to_go_camel_case(field.typename)) }}{% endif %} `json:"{{ field.name }}{% if field.optional %},omitempty{% endif %}"`
{% endfor -%}
}

{% endfor -%}

{% for array in module.arrays %}
    {%- if is_builtin_type(array.element_type) -%}
        {%- set element_type = builtin_to_go(array.element_type) -%}
    {%- else -%}
        {%- set element_type = capitalize(to_go_camel_case(array.element_type)) -%}
    {%- endif %}
type {{ capitalize(to_go_camel_case(array.name)) }} []{{ element_type }}
{% endfor %}
